package com.agileapes.dragonfly.sample.service;

import com.agileapes.dragonfly.data.DataAccessSession;
import com.agileapes.dragonfly.data.impl.SecuredDataAccess;
import com.agileapes.dragonfly.dialect.impl.Mysql5Dialect;
import com.agileapes.dragonfly.entity.EntityContext;
import com.agileapes.dragonfly.entity.EntityHandler;
import com.agileapes.dragonfly.entity.impl.EntityProxy;
import com.agileapes.dragonfly.metadata.impl.DefaultMetadataRegistry;
import com.agileapes.dragonfly.sample.entities.Person;
import com.agileapes.dragonfly.security.impl.DefaultDataSecurityManager;
import com.agileapes.dragonfly.security.impl.FatalAccessDeniedHandler;
import com.agileapes.dragonfly.statement.impl.StatementRegistry;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.Serializable;
import java.util.Collection;
import java.util.Map;

/**
 * @author Mohammad Milad Naseri (m.m.naseri@gmail.com)
 * @since 1.0 (2013/9/15, 16:56)
 */
@Service
public class InstantiationService {

    @Autowired
    private EntityContext entityContext;

    public void execute() {
        long normalTime = System.nanoTime();
        final int benchmarkSize = 10000;
        final DefaultDataSecurityManager securityManager = new DefaultDataSecurityManager(new FatalAccessDeniedHandler());
        final SecuredDataAccess dataAccess = new SecuredDataAccess(new DataAccessSession(new Mysql5Dialect(), new StatementRegistry(), new DefaultMetadataRegistry()), securityManager, entityContext);
        for (int i = 0; i < benchmarkSize; i ++) {
            new EntityProxy<Object>(dataAccess, null, securityManager, new EntityHandler<Object>() {
                @Override
                public Class<Object> getEntityType() {
                    return null;
                }

                @Override
                public Map<String, Object> toMap(Object entity) {
                    return null;
                }

                @Override
                public Object fromMap(Object entity, Map<String, Object> map) {
                    return null;
                }

                @Override
                public Serializable getKey(Object entity) {
                    return null;
                }

                @Override
                public void setKey(Object entity, Serializable key) {
                }

                @Override
                public boolean hasKey() {
                    return false;
                }

                @Override
                public boolean isKeyAutoGenerated() {
                    return false;
                }

                @Override
                public void copy(Object original, Object copy) {
                }

                @Override
                public String getKeyProperty() {
                    return null;
                }

                @Override
                public void prepareRelations(Object entity) {
                }

                @Override
                public Collection<?> getRelatedItems(Object entity) {
                    return null;
                }
            });
            new Person();
        }
        normalTime = System.nanoTime() - normalTime;
        long contextTime = System.nanoTime();
        for (int i = 0; i < benchmarkSize; i ++) {
            entityContext.getInstance(Person.class);
        }
        contextTime = System.nanoTime() - contextTime;
        System.out.println("Benchmark size: " + benchmarkSize);
        System.out.println("Normal time: " + normalTime);
        System.out.println("Context time: " + contextTime);
        System.out.println("[c/n] : " + (((double) contextTime) / normalTime));
    }

}
